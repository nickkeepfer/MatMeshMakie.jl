var documenterSearchIndex = {"docs":
[{"location":"api_reference/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api_reference/","page":"API","title":"API","text":"This section provides a comprehensive list of all functions and types available in MatMeshMakie.","category":"page"},{"location":"api_reference/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api_reference/","page":"API","title":"API","text":"MtlMaterial","category":"page"},{"location":"api_reference/#MatMeshMakie.MtlMaterial","page":"API","title":"MatMeshMakie.MtlMaterial","text":"MtlMaterial\n\nA mutable struct representing a material in MTL format.\n\nFields\n\nname::String: The name of the material.\nambient::Vec3f: The ambient color of the material.\nspecular::Vec3f: The specular color of the material.\ndiffuse::Vec3f: The diffuse color of the material.\ntransmission_filter::Vec3f: The transmission filter of the material.\nillum::Int: The illumination model to use.\ndissolve::Float32: The dissolve factor (opacity).\nspecular_exponent::Float32: The specular exponent for the Phong specular model.\nambient_texture::String: The ambient texture map.\nspecular_texture::String: The specular texture map.\ndiffuse_texture::String: The diffuse texture map.\nreflection_texture::String: The reflection texture map.\nbump_map::String: The bump map.\ntransparency::Float32: The transparency of the material.\noptical_density::Float32: The optical density for the surface.\nemissive::Vec3f: The emissive color of the material.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"api_reference/","page":"API","title":"API","text":"readMtlFile\nplot_obj_mtl\nget_material_properties\nget_face_materials\nsplit_mesh_by_material\nget_submesh_material_properties\nplot_mesh_with_materials","category":"page"},{"location":"api_reference/#MatMeshMakie.readMtlFile","page":"API","title":"MatMeshMakie.readMtlFile","text":"readMtlFile(filepath::String)\n\nReads an MTL file and returns a vector of MtlMaterial objects.\n\nArguments\n\nfilepath::String: The path to the MTL file.\n\nReturns\n\nVector{MtlMaterial}: A vector containing the parsed materials.\n\n\n\n\n\nreadMtlFile(io::IO; debug=false)\n\nReads an MTL file from an IO stream and returns a vector of MtlMaterial objects.\n\nArguments\n\nio::IO: The IO stream to read from.\ndebug::Bool: Whether to print debug information (default is false).\n\nReturns\n\nVector{MtlMaterial}: A vector containing the parsed materials.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#MatMeshMakie.plot_obj_mtl","page":"API","title":"MatMeshMakie.plot_obj_mtl","text":"plot_obj_mtl(asset_obj::String, asset_mtl::String=\"\")\n\nPlots an OBJ file with its associated MTL file.\n\nArguments\n\nasset_obj::String: The path to the OBJ file.\nasset_mtl::String: The path to the MTL file (optional).\n\nOutput\n\nA plot is displayed showing the 3D object with its associated materials.\n\n\n\n\n\nplot_obj_mtl(asset_obj::String, materials::Vector{MtlMaterial})\n\nPlots a 3D mesh from an OBJ file using custom material properties.\n\nArguments\n\nasset_obj::String: The path to the OBJ file containing the 3D mesh.\nmaterials::Vector{MtlMaterial}: A vector of MtlMaterial objects containing the material properties.\n\nUsage\n\nThis function reads the mesh from the OBJ file specified by asset_obj and applies the materials from the materials vector to the mesh faces. It then plots the mesh using these custom materials.\n\nExample\n\n```julia materials = readMtlFile(\"example.mtl\") plotobjmtl(\"example.obj\", materials)\n\nReturns Displays the 3D mesh plot.\n\nSee Also     MtlMaterial: For the structure of the material properties.     readMtlFile: For reading materials from an MTL file.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#MatMeshMakie.get_material_properties","page":"API","title":"MatMeshMakie.get_material_properties","text":"get_material_properties(mtl_file::String, material_name::String, materials)\n\nReturns a dictionary of material properties for a given material name.\n\nArguments\n\nmtl_file::String: The path to the MTL file.\nmaterial_name::String: The name of the material to look for.\nmaterials: The vector of MtlMaterial objects to search in.\n\nReturns\n\nDict: A dictionary containing the material properties.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#MatMeshMakie.get_face_materials","page":"API","title":"MatMeshMakie.get_face_materials","text":"get_face_materials(obj_filepath::String)\n\nReturns a vector of material names associated with each face in the OBJ file.\n\nArguments\n\nobj_filepath::String: The path to the OBJ file.\n\nReturns\n\nVector{String}: A vector containing the material names associated with each face.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#MatMeshMakie.split_mesh_by_material","page":"API","title":"MatMeshMakie.split_mesh_by_material","text":"split_mesh_by_material(mesh, face_materials)\n\nSplits a mesh into sub-meshes based on the material names associated with each face.\n\nArguments\n\nmesh: The original mesh.\nface_materials: A vector containing the material names associated with each face.\n\nReturns\n\nOrderedDict{String, Vector{GeometryBasics.NgonFace{3, OffsetInteger{-1, UInt32}}}}: An ordered dictionary where the keys are material names and the values are vectors of faces associated with each material.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#MatMeshMakie.get_submesh_material_properties","page":"API","title":"MatMeshMakie.get_submesh_material_properties","text":"get_submesh_material_properties(asset_obj::String, asset_mtl::String)\n\nReturns an ordered dictionary containing sub-meshes and their associated material properties.\n\nArguments\n\nasset_obj::String: The path to the OBJ file.\nasset_mtl::String: The path to the MTL file.\n\nReturns\n\nOrderedDict{String, Tuple{GeometryBasics.Mesh, Dict{Symbol, Any}}}: An ordered dictionary where the keys are material names and the values are tuples containing the sub-mesh and a dictionary of material properties.\n\n\n\n\n\n","category":"function"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This page provides a few examples to help you get started with MatMeshMakie.","category":"page"},{"location":"examples/#Basic-Usage","page":"Examples","title":"Basic Usage","text":"","category":"section"},{"location":"examples/#Plotting-a-Simple-Mesh","page":"Examples","title":"Plotting a Simple Mesh","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using MatMeshMakie\nusing FileIO\n\n# Plot the mesh\nplot_obj_mtl(\"example.obj\")","category":"page"},{"location":"examples/#Adding-Material-Properties","page":"Examples","title":"Adding Material Properties","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using MatMeshMakie\n\n# Plot mesh with materials\nplot_obj_mtl(\"example.obj\", \"example.mtl\")","category":"page"},{"location":"examples/#Advanced-Usage","page":"Examples","title":"Advanced Usage","text":"","category":"section"},{"location":"examples/#Customizing-Material-Properties","page":"Examples","title":"Customizing Material Properties","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using MatMeshMakie, GLMakie\n\n# Load materials\nmaterials = readMtlFile(\"example.mtl\")\n\n# Customize material properties\nmaterials[1].ambient = Vec3f(0.2, 0.2, 0.2)\n\n# Plot the mesh with customized materials\nplot_obj_mtl(\"example.obj\", materials)","category":"page"},{"location":"examples/#Splitting-Mesh-by-Material","page":"Examples","title":"Splitting Mesh by Material","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using MatMeshMakie\n\n# Load mesh and materials\nobj_mesh = FileIO.load(\"example.obj\")\nmaterials = readMtlFile(\"example.mtl\")\n\n# Split mesh by material\nmaterial_mesh_dict = split_mesh_by_material(obj_mesh, materials)\n\n# Plot each sub-mesh\nfor (material_name, sub_mesh_faces) in material_mesh_dict\n    plot_obj_mtl(sub_mesh_faces, material_name)\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For more details, please refer to the API Reference.","category":"page"},{"location":"introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Welcome to MatMeshMakie.jl, a Julia package designed to make working with 3D models in OBJ format and their associated MTL files easier and more efficient.","category":"page"},{"location":"introduction/#What-is-MatMeshMakie?","page":"Introduction","title":"What is MatMeshMakie?","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"MatMeshMakie is a package that provides functionalities for parsing, manipulating, and visualizing 3D models and their associated materials. ","category":"page"},{"location":"introduction/#What's-Next?","page":"Introduction","title":"What's Next?","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Installation\nAPI Reference\nExamples","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/#Requirements","page":"Installation","title":"Requirements","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Julia 1.6 or higher","category":"page"},{"location":"installation/#Installing-MatMeshMakie","page":"Installation","title":"Installing MatMeshMakie","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"To install MatMeshMakie, you can use the Julia package manager. Open your Julia REPL and type:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"] add https://github.com/nickkeepfer/MatMeshMakie.jl","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"This will download and install the package and its dependencies.","category":"page"},{"location":"installation/#Verifying-the-Installation","page":"Installation","title":"Verifying the Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"To verify that MatMeshMakie has been successfully installed, you can run the following command in the Julia REPL:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using MatMeshMakie","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"If no error messages appear, the installation was successful.","category":"page"},{"location":"installation/#What's-Next?","page":"Installation","title":"What's Next?","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Examples\nAPI Reference","category":"page"},{"location":"","page":"Home","title":"Home","text":"@meta CurrentModule = MatMeshMakie","category":"page"},{"location":"#MatMeshMakie","page":"Home","title":"MatMeshMakie","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MatMeshMakie.","category":"page"},{"location":"#Table-of-Contents","page":"Home","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Installation\nExamples\nAPI Reference","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MatMeshMakie.jl is a Julia package designed for working with OBJ and MTL files, providing functionalities for parsing, manipulating, and visualizing 3D models and their associated materials.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Parse OBJ files to extract vertex, normal, and texture information.\nRead MTL files to obtain material properties like ambient, diffuse, and specular colors.\nVisualize 3D models with associated materials.\nSupport for texture mapping.","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here's a quick example to get you started:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using MatMeshMakie\n\n# Parse an OBJ file\nobj_data = readObjFile(\"path/to/your/file.obj\")\n\n# Parse the associated MTL file\nmtl_data = readMtlFile(\"path/to/your/file.mtl\")\n\n# Visualize the 3D model with materials\nplot_obj_mtl(\"path/to/your/file.obj\", \"path/to/your/file.mtl\")","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This project is licensed under the MIT License. See the LICENSE file for details.","category":"page"}]
}
